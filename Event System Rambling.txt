To elaborate further on our design for hitboxes. The hitboxes themselves will detect if they have collided with anything, but if they do detect a collision, they don't do anything except create an event signaling they have hit something. Now what I'm wondering is... how much data is in the event? Like, should I put the damage of the hitbox in the event? Or should I just put the ID of the hitbox in the event? Is it possible to use the same event object for everything in the game?

For now, I think we're going to make unique events for each type of event. I think in some cases it would be better if the event itself contained a bunch of important data, others not so much. Hitboxes, for example, I think just need the ID of the hitbox. 

But regarding hitbox events... when does the event get deleted? Hitboxes will usually sit inside an actors collision mask for a number of frames. How do we know when to delete the event? Who deletes the event??? Let's remind ourselves that we decided the actors and hitboxes would do all the code, so we don't have to worry about the event doing anything. And, actually, let's remind ourselves again that it's the STATES that will do most of the heavy lifting here. The actor, in general, does not care about hitboxes, it's the hurt state that cares. So the hurt state will check for hitbox_events every frame. If it finds one that targets the actor, it processes it and deletes the event... That makes sense right? And let's remind ourselves of this: the hurt state will store a list of all hitboxes/attacks that have hit the actor. So... the hitbox can just mindlessly create events targetting the actor every frame (maybe we'll stop it from creating duplicate events). But the hurt state will look at each event, and recognize whether or not the hitbox of that event has already hit the actor. Whether that hitbox has hit the actor or not... the hurt state will delete it, and that's because the hurt state is the thing that processes hitbox_events. Once it's looked at them, they don't need to exist. 

Oh wait! I just had a thought... We could indeed make one event object for everything, and have an enumerator that defines what type of event it is. So the only 3 variables events should need are type, ID of instance making event, ID of instance event targets. And we should be able to leave some of those as undefined most of the time.

We left off having just written the code in o_hitbox that generates hit events. Next we should probably program the hurt state. 

28th of March, 2020

We just finished rambling to ourselves about how to do a spider boss, and it's become clear that our code doesn't easily accommodate the behavior we want. I have more ideas on how to make a crude event system that will give us the flexibility and reliability to make any kind of boss/enemy, and do whatever we want. 

Basically, we're going to make a bunch of different events, and loads of things are going to generate and handles these various events. We're going to try and list out what we think we'll need for our current system, and in the order we think we'll need it. 

Hitboxes
Updates position and animation, or whatever.

Hurtboxes
Detects hitboxes. Hurtboxes will have a "target" field, or something to indicate what kind of hitbox they're looking for. Throws event_hurt.

Guardboxes:
Detects hitboxes same as hurtboxes. And possibly handles hurtboxes. See we need different "guards" to do different things. For example, a directional shield used by the player needs to block attacks, but only if the shield is oriented correctly relative to the attack. In this instance, the guardbox is going to need to know the position of the hurtbox it's protecting. On the other hand, for our spider boss idea, the legs are going to be covered in guard boxes, but they're not guarding anything. They're just there to let the player know the legs are not vulnerable. There doesn't need to be a hurtbox connected to it. In the former case, the guardbox will delete the event_hurt, and create an event_guard if the attack is successfully guarded. In the latter case, an event_guard will be created. We can change this on a case by case basis. 

Event_Guard Handle
Anything that should respond to an event guard will be handled here. For the most part, that'll be states like defending or whatever. 

Event_Hurt Handle
Anything that should respond to event_hurt events is handled here. For the most part, that will be hurt states. 
