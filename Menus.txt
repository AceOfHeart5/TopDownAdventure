Our last system for menus was terrible. It was spaghetti and confusing. Adding new menu options was hard just because I didn't understand my own code. We need to think of a better system for this one. So let's make a menu object that acts as a parent object. We'll update it in the same way we update actors (by using the user events). Perhaps we could even make the menu options themselves be objects? We could think of menus as like actors, and options as like states. Actually that's kind of silly... because we're not going to run different code every frame for the meny depending on the option. But we WILL run different code depending on the menu choice. Ok... so maybe they should be separate objects. The menus will just have "choice" objects that we add to it in the create event. These choices are actual objects run code (a user event). We could have variables/scripts/events that return a true or false depending on whether or not the "choice" has finished what it needs to do. This would allow us to do things like have a choice that just spawns a new menu... and it's "done" fuctnion (or whatever we decide to call these) will return true when the menu is closed. 

Something to keep in mind is where to position everything so that button presses are not registered for sub menus. In our previous project, that was a big issue. So if we pressed "select" on "sound options", the sound menu would open with the first option already being treated as if we'd pressed "select". I'm quite sure we can avoid this simply by executing choice code before we open new menus. Actually... wait, no. We're going to just loop through all instances of menu objects to do this. If we create a new menu, then the code is going to loop through to the next menu.... we should try making a loop that decrements through all the instance numbers instead of incrementing. But what happens if we delete a menu??? Oh wait... I know what to do. We don't create or delete menus at all. We'll create a menu variable "active". And only execute its code if it is active. 

Ah, actually, yes. We'll have two variables "active" and "start". In code, activating a menu will only set its "start" variable to true. But in the end step of menus, we'll have active set to true if start has been set true (and remember to set start to false each frame regardless). This way activating a sub menu won't run its logic until the next frame, but we can still have menus respond the same frame that a button is pressed. 

Haha... ya know what? We should make text boxes for this game first. Or maybe we don't? One of the main things textboxes do for is line wrap and type. We're not going to worry about those things with menus. So I guess we can just draw text everything. 