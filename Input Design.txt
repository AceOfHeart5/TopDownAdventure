Alright, this project is using the same overall system as the last game. Actors have a controller object that their ai manipulates. The actors states respond to this input, and that's how every actor moves around/attack/whatever. But to stay organized, we need to plan out how the actual controllers work in terms of code. Do we have an enumerator with every possible button? Do we use macros. Let's try and explain this to ourselves:

Ok first, let's suppose this: we use an enumerator to keep track of every button the game will use. It would look like:

INPUT.UP
INPUT.DOWN
INPUT.LEFT
INPUT.RIGHT
INPUT.ATTACK
INPUT.INTERACT
INPUT.WHATEVER

Enumerators are just fancy ways to keep names of things consistent though. The controller itself will have a variable for all of these buttons. Or wait... should it instead have an array? That way if we want to set a button pressed on the controller we could just do: 

buttons[|INPUT.WHATEVER] = true;

And if we wanted to see if an actor was pressing that button, we'd just do:

if (buttons[|INPUT.WHATEVER) // do something

I kinda like that. However we also need to keep track of whether or not the button was "just" pressed. Right now we're keeping track of this with two variables for every input in the controller object. 

controller_input
controller_input_pressed

And the controller object sets all "pressed" variables to false at the end of every step. So the input array would need to have 2 spots in each index, which means it's a 2D array. 2D arrays in game maker are kind of annoying, so maybe it's better to just stick with variables. Either way, however, we'll need the enumerator as a way to check inputs everywhere. For example, let's say we wanted to set a button to "pressed" on a controller. How do we tell the controller which button we want pressed? The enumerator is how we'll do this. 

Actually, after talking through it with myself, I think we've got a plan. The controller object will have an enumerator for all the buttons, and also a variable (with a pressed version) for all the buttons. Then we'll have a bunch of scripts to set buttons to pressed, get whether they are on/pressed or not, and to reset the whole controller.

Hmm... we started coding and actually, having a ton of variables is annoying. Let's experiment with the 2D array idea first.
The idea was correct, but to hell with 2D arrays in gml. I couldn't figure out the syntax and it sucked. A grid however, worked great.

Now, we need to sort out how input is going to work for menus and stuff in addition to the game-world. The player ai checks the input devices for input within the game world, so how is the main menu, or the pause menu going to do that? Actually, we should create an object that checks the input devices each step, we'll probably call it o_input_device, and the polluser ai will just check the input device object. Then Menus can just check the input device object as well.

Ok, so we've got a main input object to store inputs. It has 3 arrays. The first is the 2D grid array thing we thought up earlier. The first array is for each button, and the second array is a size of two for down and pressed. We also have an array for gamepad input assignments, and keyboard assignments. What we need to do now is understand how to check/assign everything each step. Let's try and step through this:

First, determine using keyboard or gamepad. Easy, just an if/else statement.
Then, iterate over each button in the input array (up, down, left, right, attack...)
check if that button is down/pressed.. except that means doing something different depending on that inputs assignment. 

Ah ha! So we need a switch statement that checks the assignment array at the index we're iterating on. 
