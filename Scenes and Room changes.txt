So the idea of having a stack of focus objects simplifies a lot of issues we ran into in our last project. If we ever need to change rooms, or run a scene, we simply add the scene object onto the stack. Our game will automagically update it and do whatever needs to be done. We don't have to worry about other things getting in the way.

We should however, consider how scenes relate to our pause menu, and also how the main menu, and any other non-pause menu things will work. Currently, the game world itself listens for the start button, and activates it. We do, however, want to be able to pause scenes, and if scenes go on the stack on top of the game world... scenes because unpausable. 

So one easy and obvious solution is to just have the master object check for, and activate the pause menu. It would not be hard to just code a series of if statements that stop it from opening in certain rooms or whatever (like the title screen menu). I don't think that's very elegant though, nor does it feel intuitive. I'd like to think of a better solution at some point, but let's just go with that for now. 

So, when moving the pause menu to the master object, we noticed an interesting problem, pausing the game doesn't freeze animated sprites. Currenlty we have things setup so animations only stop if something is actively freezing actors. Our pause menu doesn't do that, it just takes focus away from the game world. My first idea to solve this is to just put a line in the draw event of the actor object that sets its image speed to 0 if the o_master.pausemenu.active is true. Let's do that for now. 
We're now going to implement doors/room transitions. We're doing it the same way we did last time.

Doors are objects that hold a door and room variable. These are the door and room linked to the door. When the door is touched or activated or whatever. A scene object is created that fades out the screen, moves the game to the target room, and positions the player in the correct spot.

Now this has me thinking about how we're going to handle things the player can interact with. I don't know exactly what I'll want in the game, but at the very least the player will be able to talk to actors, and examine certain objects. So who checks for who? Does the player check to see if it's collided with a door? Or does the door check the player? And for things where the player has to actually press "interact", who's listening there? And I think this is especially tricky when talking to other actors. My first instinct is to add a "talk" state that sits in the "always check" list as well as create an "interact" state for the player. Similar to attacking, the interact will create a small hitbox, and if it collides with the actor, then the actor enters its talk state. This is exactly how we programmed the hitbox and hurt interaction. Back to doors though, I think it makes more sense for the door to listen for the player, since the player doesn't actually do anything other than collide with the door. I suppose it's worth creating another class of object for this. 